from abc import ABC, abstractmethod

class Account:
    def __init__(self, account_number, balance, pin_code):
        self.__account_number = account_number
        self.__balance = balance
        self.__pin_code = pin_code

    def deposit(self, amount, pin):
        if pin == self.__pin_code:
            self.__balance += amount
            print(f'–°—á—ë—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {self.__balance}')
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π PIN.")

    def withdraw(self, amount, pin):
        if pin != self.__pin_code:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π PIN.")
        elif amount > self.__balance:
            print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        else:
            self.__balance -= amount
            print(f'–°–Ω—è—Ç–æ {amount}. –û—Å—Ç–∞—Ç–æ–∫: {self.__balance}')

    def get_balance(self, pin):
        if pin == self.__pin_code:
            return self.__balance
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π PIN.")
            return None


class Product:
    def __init__(self, name, price):
        self.name = name
        self.__price = price

    def set_discount(self, percent):
        if percent < 0:
            print("–°–∫–∏–¥–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
        else:
            new_price = self.__price * (1 - percent / 100)
            self.__price = max(new_price, 0)

    def final_price(self):
        return round(self.__price, 2)


class Course:
    def __init__(self, name, max_places):
        self.__name = name
        self.__students = []
        self.__max_places = max_places

    def add_student(self, name):
        if len(self.__students) < self.__max_places:
            self.__students.append(name)
            print(f"{name} –¥–æ–±–∞–≤–ª–µ–Ω(–∞) –Ω–∞ –∫—É—Ä—Å {self.__name}.")
        else:
            print("–ú–µ—Å—Ç –Ω–µ—Ç.")

    def remove_student(self, name):
        if name in self.__students:
            self.__students.remove(name)
            print(f"{name} —É–¥–∞–ª—ë–Ω(–∞) —Å –∫—É—Ä—Å–∞ {self.__name}.")
        else:
            print("–¢–∞–∫–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ—Ç.")

    def get_students(self):
        return tuple(self.__students)


class SmartWatch:
    def __init__(self, battery):
        self.__battery = battery

    def use(self, minutes):
        decrease = minutes / 10
        self.__battery = max(self.__battery - decrease, 0)
        print(f"–ó–∞—Ä—è–¥: {self.__battery:.1f}%")

    def charge(self, percent):
        self.__battery = min(self.__battery + percent, 100)
        print(f"–ó–∞—Ä—è–¥: {self.__battery:.1f}%")

    def get_battery(self):
        return self.__battery


class Transport:
    def __init__(self, speed, capacity):
        self.speed = speed
        self.capacity = capacity

    def travel_time(self, distance):
        return distance / self.speed

class Bus(Transport):
    pass

class Train(Transport):
    pass

class Airplane(Transport):
    def travel_time(self, distance):
        time = super().travel_time(distance)
        return time * 0.8


class Order:
    def __init__(self, food, base_price):
        self.food = food
        self.base_price = base_price

    def calculate_total(self):
        return self.base_price

class DineInOrder(Order):
    def calculate_total(self):
        tip = self.base_price * 0.1
        return self.base_price + tip

class TakeAwayOrder(Order):
    def calculate_total(self):
        discount = self.base_price * 0.05
        return self.base_price - discount

class DeliveryOrder(Order):
    def calculate_total(self):
        delivery = self.base_price * 0.15
        return self.base_price + delivery


class Character:
    def __init__(self, name, hp, atk):
        self.name = name
        self.hp = hp
        self.atk = atk

    def attack(self):
        pass

class Warrior(Character):
    def attack(self):
        print(f"{self.name} –∞—Ç–∞–∫—É–µ—Ç –º–µ—á–æ–º!")

class Mage(Character):
    def attack(self):
        print(f"{self.name} –≤—ã–ø—É—Å–∫–∞–µ—Ç –º–∞–≥–∏—á–µ—Å–∫–∏–π —Å–Ω–∞—Ä—è–¥!")

class Archer(Character):
    def attack(self):
        print(f"{self.name} —Å—Ç—Ä–µ–ª—è–µ—Ç –∏–∑ –ª—É–∫–∞!")


class MediaFile:
    def __init__(self, title, duration):
        self.title = title
        self.duration = duration

    def play(self):
        pass

class AudioFile(MediaFile):
    def play(self):
        print(f"–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∞—É–¥–∏–æ: {self.title} ({self.duration} –º–∏–Ω)")

class VideoFile(MediaFile):
    def play(self):
        print(f"–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤–∏–¥–µ–æ: {self.title} ({self.duration} –º–∏–Ω)")

class Podcast(MediaFile):
    def play(self):
        print(f"–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ–¥–∫–∞—Å—Ç: {self.title} ({self.duration} –º–∏–Ω)")


class PaymentSystem(ABC):
    @abstractmethod
    def process_payment(self, amount):
        pass

class CreditCardPayment(PaymentSystem):
    def process_payment(self, amount):
        print(f"–û–ø–ª–∞—Ç–∞ {amount} —Å–æ–º —á–µ—Ä–µ–∑ –∫—Ä–µ–¥–∏—Ç–Ω—É—é –∫–∞—Ä—Ç—É –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")

class CryptoPayment(PaymentSystem):
    def process_payment(self, amount):
        print(f"–û–ø–ª–∞—Ç–∞ {amount} —Å–æ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")

class BankTransfer(PaymentSystem):
    def process_payment(self, amount):
        print(f"–û–ø–ª–∞—Ç–∞ {amount} —Å–æ–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –ø–µ—Ä–µ–≤–æ–¥–æ–º –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")


class Animal(ABC):
    @abstractmethod
    def eat(self):
        pass

    @abstractmethod
    def sleep(self):
        pass

class Lion(Animal):
    def eat(self):
        print("–õ–µ–≤ –µ—Å—Ç –º—è—Å–æ.")
    def sleep(self):
        print("–õ–µ–≤ —Å–ø–∏—Ç –≤—ã—Ç—è–Ω—É–≤—à–∏—Å—å –Ω–∞ —Å–æ–ª–Ω—Ü–µ.")

class Elephant(Animal):
    def eat(self):
        print("–°–ª–æ–Ω –µ—Å—Ç —Ç—Ä–∞–≤—É –∏ —Ñ—Ä—É–∫—Ç—ã.")
    def sleep(self):
        print("–°–ª–æ–Ω —Å–ø–∏—Ç —Å—Ç–æ—è.")

class Snake(Animal):
    def eat(self):
        print("–ó–º–µ—è –µ—Å—Ç –º—ã—à–µ–π.")
    def sleep(self):
        print("–ó–º–µ—è —Å–ø–∏—Ç, —Å–≤–µ—Ä–Ω—É–≤—à–∏—Å—å –∫–æ–ª—å—Ü–æ–º.")


class Document(ABC):
    @abstractmethod
    def open(self):
        pass
    @abstractmethod
    def edit(self):
        pass
    @abstractmethod
    def save(self):
        pass

class WordDocument(Document):
    def open(self):
        print("–û—Ç–∫—Ä—ã—Ç Word –¥–æ–∫—É–º–µ–Ω—Ç.")
    def edit(self):
        print("–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è Word –¥–æ–∫—É–º–µ–Ω—Ç.")
    def save(self):
        print("Word –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

class PdfDocument(Document):
    def open(self):
        print("–û—Ç–∫—Ä—ã—Ç PDF —Ñ–∞–π–ª.")
    def edit(self):
        print("–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è PDF —Ñ–∞–π–ª.")
    def save(self):
        print("PDF —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

class SpreadsheetDocument(Document):
    def open(self):
        print("–û—Ç–∫—Ä—ã—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞.")
    def edit(self):
        print("–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞.")
    def save(self):
        print("–¢–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")


class Lesson(ABC):
    @abstractmethod
    def start(self):
        pass

class VideoLesson(Lesson):
    def start(self):
        print("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–∏–¥–µ–æ—É—Ä–æ–∫!")

class QuizLesson(Lesson):
    def start(self):
        print("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–µ—Å—Ç!")

class TextLesson(Lesson):
    def start(self):
        print("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —á—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞!")


class EmailNotification:
    def send(self, message):
        print(f"üìß Email: {message}")

class SMSNotification:
    def send(self, message):
        print(f"üì± SMS: {message}")

class PushNotification:
    def send(self, message):
        print(f"üîî Push: {message}")

notifications = [EmailNotification(), SMSNotification(), PushNotification()]
for n in notifications:
    n.send("–ü—Ä–∏–≤–µ—Ç, –°–∞–º–∏–Ω–∞!")


class Square:
    def __init__(self, side):
        self.side = side
    def perimeter(self):
        return 4 * self.side

class Circle:
    def __init__(self, radius):
        self.radius = radius
    def perimeter(self):
        return 2 * 3.14 * self.radius

class Triangle:
    def __init__(self, a, b, c):
        self.a, self.b, self.c = a, b, c
    def perimeter(self):
        return self.a + self.b + self.c

shapes = [Square(4), Circle(3), Triangle(2, 4, 6)]
for s in shapes:
    print(s.perimeter())


class Manager:
    def work(self):
        print("–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã.")

class Developer:
    def work(self):
        print("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∏—à–µ—Ç –∫–æ–¥.")

class Designer:
    def work(self):
        print("–î–∏–∑–∞–π–Ω–µ—Ä —Å–æ–∑–¥–∞—ë—Ç –≤–∏–∑—É–∞–ª—ã.")

employees = [Manager(), Developer(), Designer()]
for e in employees:
    e.work()


class FireSpell:
    def cast(self, target):
        print(f"{target} –ø–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–Ω –æ—Ç –æ–≥–Ω—è!")

class IceSpell:
    def cast(self, target):
        print(f"{target} –∑–∞–º–æ—Ä–æ–∂–µ–Ω!")

class HealingSpell:
    def cast(self, target):
        print(f"{target} –∏—Å—Ü–µ–ª—è–µ—Ç—Å—è!")

spells = [FireSpell(), IceSpell(), HealingSpell()]
target = "–í–æ–ª–∞–Ω-–¥–µ-–ú–æ—Ä—Ç"
for spell in spells:
    spell.cast(target)
